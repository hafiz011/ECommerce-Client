@page "/products"
@using Ecommerce.Client.Services
@using Ecommerce.Client.Models
@inject ProductService ProductService

<div class="d-flex">
    <CategorySidebar SelectedCategoryId="@selectedCategory"
                     OnCategorySelected="FilterProducts" />

    <div class="container-fluid">
        <h4 class="mt-3">@pageTitle</h4>

        @if (isLoading)
        {
            <p class="text-center mt-5">Loading products...</p>
        }
        else if (products.Count == 0)
        {
            <p class="text-center text-muted mt-5">No products found.</p>
        }
        else
        {
            <div class="row g-3 mt-2">
                @foreach (var p in products)
                {
                    <div class="col-6 col-md-4 col-lg-3">
                        <div class="card h-100 shadow-sm product-card">
                            <img src="@p.ImageUrl" class="card-img-top">
                            <div class="card-body">
                                <h6>@p.Title</h6>
                                <p class="fw-bold text-primary">$@p.Price</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .product-card img {
        height: 180px;
        object-fit: cover;
    }
</style>

@code {
    private List<ProductDto> products = new();
    private bool isLoading = false;
    private string? selectedCategory = null;
    private string pageTitle = "All Products";

    protected override async Task OnInitializedAsync()
    {
        await LoadAllProducts();
    }

    private async Task LoadAllProducts()
    {
        isLoading = true;
        products = await ProductService.GetAllProducts();
        pageTitle = "All Products";
        isLoading = false;
    }

    private async Task FilterProducts(string? categoryId)
    {
        selectedCategory = categoryId;
        isLoading = true;

        if (string.IsNullOrEmpty(categoryId))
        {
            await LoadAllProducts();
        }
        else
        {
            products = await ProductService.GetProductsByCategory(categoryId);
            pageTitle = $"Products in Selected Category";
        }

        isLoading = false;
        StateHasChanged();
    }
}
