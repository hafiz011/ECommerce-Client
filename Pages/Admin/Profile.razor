@page "/admin/profile"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject ToastService ToastService
@inject IJSRuntime JsRuntime



<h4 class="mb-4">Account Settings</h4>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border"></div>
    </div>
}
else
{
    <EditForm Model="@model" OnValidSubmit="SaveProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-4">

            <!-- Profile Info Card -->
            <div class="col-md-4">
                <div class="card shadow-sm border-0 text-center p-4">
                    <img src="https://cdn-icons-png.flaticon.com/512/149/149071.png"
                         class="rounded-circle shadow-sm mx-auto" width="130" />

                    <h5 class="mt-3">@model.FirstName @model.LastName</h5>
                    <p class="text-muted">@email</p>

                    <button type="button" class="btn btn-outline-danger btn-sm w-100 mt-2"
                            data-bs-toggle="modal"
                            data-bs-target="#changePasswordModal">
                        Change Password
                    </button>
                </div>
            </div>

            <!-- Profile Form Details -->
            <div class="col-md-8">
                <div class="card shadow-sm border-0 p-4">

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">First Name</label>
                            <InputText class="form-control" @bind-Value="model.FirstName" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Last Name</label>
                            <InputText class="form-control" @bind-Value="model.LastName" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <InputText class="form-control" @bind-Value="model.Phone" />
                    </div>

                    <hr />

                    <h6 class="fw-semibold mb-3">Address</h6>

                    <div class="mb-3">
                        <label class="form-label">Street</label>
                        <InputText class="form-control" @bind-Value="model.Address.Street" />
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">City</label>
                            <InputText class="form-control" @bind-Value="model.Address.City" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">State</label>
                            <InputText class="form-control" @bind-Value="model.Address.State" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Country</label>
                            <InputText class="form-control" @bind-Value="model.Address.Country" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Zip Code</label>
                            <InputText class="form-control" @bind-Value="model.Address.Zip" />
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2">Saving...</span>
                            @* <p>Saving...</p> *@
                        }
                        else
                        {
                            <span>Save Changes</span>
                        }
                    </button>

                </div>
            </div>

        </div>
    </EditForm>
}

<!-- Change Password Modal -->
<div class="modal fade" id="changePasswordModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Change Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />

                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Current Password</label>
                        <InputText type="password" class="form-control" @bind-Value="passwordModel.currentPassword" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">New Password</label>
                        <InputText type="password" class="form-control" @bind-Value="passwordModel.newPassword" />
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isChangingPassword">Cancel</button>
                    <button class="btn btn-primary" type="submit" disabled="@isChangingPassword">
                        @if (isChangingPassword)
                        {
                            <span class="spinner-border spinner-border-sm me-2">Updating...</span>
                            
                                                }
                        else
                        {
                            <span>Update Password</span>
                        }
                    </button>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    private UpdateAccountModel model = new();
    private ChangePasswordModel passwordModel = new();
    private bool isSaving = false;
    private bool isChangingPassword = false;
    private bool isLoading = true;
    private string email = "";

    protected override async Task OnInitializedAsync() => await LoadProfile();

    private async Task LoadProfile()
    {
        try
        {
            var response = await Http.GetAsync("auth/account");
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<ProfileResponse>();
                if (data != null)
                {
                    email = data.Email;
                    model.FirstName = data.FirstName;
                    model.LastName = data.LastName;
                    model.Phone = data.PhoneNumber;
                    model.Address = data.Address ?? new Address();
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load profile: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveProfile()
    {
        if (isSaving) return;
        isSaving = true;

        try
        {
            var response = await Http.PutAsJsonAsync("auth/account", model);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Profile updated successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to update profile! {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ChangePassword()
    {
        if (isChangingPassword) return;
        isChangingPassword = true;

        try
        {
            var response = await Http.PostAsJsonAsync("auth/change-password", passwordModel);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Password changed successfully!");
                passwordModel = new ChangePasswordModel(); // Reset form
                await JsRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.querySelector('#changePasswordModal')).hide()");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to change password! {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}");
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    public class UpdateAccountModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Phone { get; set; }
        public Address Address { get; set; } = new();
    }

    public class Address
    {
        public string? Street { get; set; }
        public string? City { get; set; }
        public string? State { get; set; }
        public string? Country { get; set; }
        public string? Zip { get; set; }
    }

    public class ProfileResponse
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public Address Address { get; set; }
    }

    public class ChangePasswordModel
    {
        public string currentPassword { get; set; }
        public string newPassword { get; set; }
    }
}
