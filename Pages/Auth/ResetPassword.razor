@page "/reset-password"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities

<div class="d-flex justify-content-center align-items-center vh-100 bg-light">
    <div class="card shadow-sm p-4" style="max-width: 450px; width: 100%;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">Reset Password</h3>

            <EditForm Model="@model" OnValidSubmit="Submit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">New Password</label>
                    <InputText @bind-Value="model.NewPassword" type="@PasswordInputType" class="form-control" />
                    <button type="button" class="btn btn-sm btn-outline-secondary mt-1" @onclick="TogglePasswordVisibility">
                        @(ShowPassword ? "Hide" : "Show")
                    </button>
                </div>

                <div class="mb-3">
                    <label class="form-label">Confirm Password</label>
                    <InputText @bind-Value="model.ConfirmPassword" type="@PasswordInputType" class="form-control" />
                </div>

                <button class="btn btn-primary w-100" type="submit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                        <p>Resetting</p>
                    }
                    else
                    {
                        <span>Reset Password</span>
                    }
                </button>
            </EditForm>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-info mt-3">@message</div>
            }
        </div>
    </div>
</div>

@code {
    private ResetPasswordModel model = new();
    private string message;
    private bool isSubmitting = false;
    private bool ShowPassword = false;

    private string PasswordInputType => ShowPassword ? "text" : "password";

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            model.Token = token;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            model.Email = email;
        }
    }

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private async Task Submit()
    {
        if (model.NewPassword != model.ConfirmPassword)
        {
            message = "Passwords do not match.";
            return;
        }

        isSubmitting = true;
        message = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("auth/reset-password", model);
            var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
            message = result?.Message ?? "Password reset successful.";
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class ResetPasswordModel
    {
        public string Email { get; set; }
        public string Token { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }
    }

    public class ApiResponse
    {
        public string Message { get; set; }
    }
}
