@using Ecommerce.Client.Models
@using Ecommerce.Client.Services
@inject CartService CartService

<div class="product-card card border-0">
    <div class="card-img-top position-relative">
        <img class="product-main img-fluid" src="@Product.ImageUrl" alt="@Product.Name" />
        @if (!string.IsNullOrEmpty(Product.HoverImageUrl))
        {
            <img class="product-hover img-fluid" src="@Product.HoverImageUrl" alt="@Product.Name" />
        }
        <div class="badge-position">
            @if (Product.IsOnSale)
            {
                <span class="badge bg-danger">Sale</span>
            }
            else if (Product.IsNew)
            {
                <span class="badge bg-success">New</span>
            }
        </div>
        <button class="btn btn-outline-secondary quick-add" title="Add to cart" @onclick="AddToCart">
            <i class="bi bi-cart-plus"></i>
        </button>
    </div>
    <div class="card-body pt-2 px-0">
        <h6 class="card-title mb-1">@Product.Name</h6>
        <div class="d-flex align-items-center mb-2">
            <div class="price me-2">@Product.Price.ToString("C")</div>
            @if (Product.OldPrice != null)
            {
                <div class="old-price text-muted text-decoration-line-through">@Product.OldPrice.Value.ToString("C")</div>
            }
        </div>
        <div class="small text-muted">@Product.ShortDescription</div>
    </div>
</div>

@code {
    [Parameter] public ProductDto Product { get; set; } = default!;

    private async Task AddToCart()
    {
        await CartService.AddAsync(Product);
    }
}
