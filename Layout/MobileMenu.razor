@using Ecommerce.Client.Models
@using Ecommerce.Client.Services
@inject CategoryService CategoryService
@inject NavigationManager Navigation

<div class="offcanvas-backdrop fade @(IsOpen ? "show d-block" : "d-none")" @onclick="Close"></div>

<div class="offcanvas offcanvas-start shadow @(IsOpen ? "show" : "")" style="visibility:@(IsOpen ? "visible" : "hidden"); width:260px;">
    <div class="offcanvas-header border-bottom">
        <h5 class="mb-0">Menu</h5>
        <button class="btn-close" @onclick="Close"></button>
    </div>

    <div class="offcanvas-body">
        <div class="fw-bold text-secondary small mb-2">Shop by Category</div>

        @if (categories == null || categories.Count == 0)
        {
            <p class="text-muted">Loading...</p>
        }
        else
        {
            @foreach (var cat in categories)
            {
                <a class="d-block mb-2 text-dark" @onclick="() => GoToCategory(cat.Id)">
                    <i class="bi bi-tag-fill text-primary me-2"></i>@cat.Name
                </a>
            }
        }

        <hr />
        <a class="d-block mb-2" href="/cart"><i class="bi bi-cart3 me-2"></i>Cart</a>
        <a class="d-block mb-2" href="/account"><i class="bi bi-person me-2"></i>Account</a>
    </div>
</div>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private List<CategoryDto> categories = new();

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && categories.Count == 0)
        {
            categories = await CategoryService.AllCategory();
        }
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }

    private void GoToCategory(string? id)
    {
        if (string.IsNullOrWhiteSpace(id)) return;
        Navigation.NavigateTo($"/products?category={id}");
        _ = OnClose.InvokeAsync();
    }
}
