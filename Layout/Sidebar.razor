@inject CategoryService CategoryService

<div class="sidebar card border-0 shadow-sm">
    <div class="card-body p-3">
        <h6 class="fw-bold mb-3">Categories</h6>

        <div class="mb-3">
            <ul class="list-group list-group-flush">
                <li class="list-group-item list-group-item-action @(SelectedCategoryId == null ? "active" : "")"
                    @onclick="() => SelectCategory(null)">
                    All
                </li>
                @foreach (var c in categories)
                {
                    <li class="list-group-item list-group-item-action @(SelectedCategoryId == c.Id ? "active" : "")"
                        @onclick="() => SelectCategory(c.Id)">
                        @c.Name
                    </li>
                }
            </ul>
        </div>

        <hr />

        <h6 class="fw-bold mb-2">Price</h6>
        <div class="mb-3">
            <div class="d-flex gap-2">
                <input class="form-control form-control-sm" type="number" min="0" @bind="priceMinString" placeholder="Min" />
                <input class="form-control form-control-sm" type="number" min="0" @bind="priceMaxString" placeholder="Max" />
            </div>
            <small class="text-muted">Enter min / max price</small>
        </div>

        <hr />

        <div class="d-grid gap-2">
            <button class="btn btn-primary btn-sm" @onclick="ApplyFilters">Apply Filters</button>
            <button class="btn btn-outline-secondary btn-sm" @onclick="ResetFilters">Reset</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<FilterParams> OnFiltersChanged { get; set; }
    [Parameter] public string? SelectedCategoryId { get; set; }

    private List<CategoryDto> categories = new();
    private decimal? MinPrice;
    private decimal? MaxPrice;
    private string priceMinString = "";
    private string priceMaxString = "";

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.AllCategory();
    }

    private async Task SelectCategory(string? id)
    {
        SelectedCategoryId = id;
        await EmitFilters();
    }

    private async Task ApplyFilters()
    {
        // parse price strings robustly
        MinPrice = decimal.TryParse(priceMinString, out var pmin) ? pmin : null;
        MaxPrice = decimal.TryParse(priceMaxString, out var pmax) ? pmax : null;

        await EmitFilters();
    }

    private async Task ResetFilters()
    {
        SelectedCategoryId = null;
        MinPrice = null;
        MaxPrice = null;
        priceMinString = priceMaxString = "";

        await EmitFilters();
    }

    private async Task EmitFilters()
    {
        var f = new FilterParams
        {
            CategoryId = SelectedCategoryId,
            MinPrice = MinPrice,
            MaxPrice = MaxPrice
        };

        if (OnFiltersChanged.HasDelegate)
            await OnFiltersChanged.InvokeAsync(f);
    }
}
